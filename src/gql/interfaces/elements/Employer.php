<?php

namespace percipiolondon\craftstaff\gql\interfaces\elements;

use craft\gql\GqlEntityRegistry;
use craft\gql\interfaces\Element;
use craft\gql\TypeManager;
use craft\gql\types\generators\ElementType;
use GraphQL\Type\Definition\InterfaceType;
use GraphQL\Type\Definition\Type;
use percipiolondon\craftstaff\helpers\gql as GqlHelper;

class Employer extends Element
{
    public static function getTypeGenerator(): string
    {
        return ElementType::getTypeGenerator(); // TODO: Change the autogenerated stub
    }

    public static function getType($fields = null): Type
    {
        if($type = GqlEntityRegistry::getEntity(self::getName())) {
            return $type;
        }

        $type = GqlEntityRegistry::createEntity(self::getName(), new InterfaceType([
            'name' => static::getName(),
            'fields' => self::class . '::getFieldDefinitions',
            'description' => 'This is the interface implemented by all employers.',
            'resolveType' => self::class . '::resolveElementTypeName'
        ]));

        ElementType::generateTypes();

        return $type;
    }

    public static function getName(): string
    {
        return 'EmployerInterface';
    }

    public static function getFieldDefinitions(): array
    {
        return TypeManager::prepareFieldDefinitions(array_merge(parent::getFieldDefinitions(), self::getConditionalFields(), [
            'name' => [
                'name' => 'name',
                'type' => Type::int(),
                'description' => 'The name of the employer'
            ],
            'address' => [
                'name' => 'address',
                'type' => Type::string(),
                'descrption' => "The employer's address"
            ]
        ]), self::getName());
    }

    protected static function getConditionalFields(): array
    {
        return [];
    }
}
