<?php

namespace percipiolondon\staff\elements;

use Craft;
use craft\base\Element;
use craft\elements\db\ElementQueryInterface;
use craft\web\Request;
use percipiolondon\staff\elements\db\BenefitVariantQuery;
use percipiolondon\staff\helpers\variants\VariantDental;
use percipiolondon\staff\records\BenefitEmployeeVariant;
use percipiolondon\staff\records\BenefitPolicy;
use percipiolondon\staff\records\BenefitType;
use percipiolondon\staff\records\TotalRewardsStatement;
use yii\web\NotFoundHttpException;

class BenefitVariant extends Element
{
    public ?TotalRewardsStatement $trs = null;
    public ?int $policyId = null;
    public ?int $trsId = null;
    public ?Request $request = null;
    public ?string $name = null;

    private ?array $_totalRewardsStatement = null;
    private ?array $_policy = null;
    private ?array $_provider = null;
    private ?array $_employees = null;

    /**
     * @return string
     */
    public static function displayName(): string
    {
        return Craft::t('staff-management', 'Benefit Variant');
    }

    /**
     * @return string
     */
    public static function lowerDisplayName(): string
    {
        return Craft::t('staff-management', 'benefit variant');
    }

    /**
     * @return string
     */
    public static function pluralDisplayName(): string
    {
        return Craft::t('staff-management', 'Benefit Variants');
    }

    /**
     * @return string
     */
    public static function pluralLowerDisplayName(): string
    {
        return Craft::t('staff-management', 'benefit variants');
    }

    /**
     * @return array
     */
    public function defineRules(): array
    {
        return parent::defineRules();
    }
    /**
     * @param mixed $context
     * @return string
     */
    public static function gqlTypeNameByContext($context): string
    {
        return 'BenefitVariant';
    }

    /**
     * @inheritdoc
     */
    public function getGqlTypeName(): string
    {
        return static::gqlTypeNameByContext($this);
    }

    /**
     * @return ElementQueryInterface
     */
    public static function find(): ElementQueryInterface
    {
        return new BenefitVariantQuery(static::class);
    }

    public function getTotalRewardsStatement(): ?array
    {
        if ($this->_totalRewardsStatement === null) {
            if ($this->trsId === null) {
                return null;
            }

            $this->_totalRewardsStatement = TotalRewardsStatement::findOne($this->trsId)->toArray();

            return $this->_totalRewardsStatement;
        }
    }

    public function getPolicy(): ?array
    {
        if ($this->_policy === null) {
            if ($this->policyId === null) {
                return null;
            }

            $this->_policy = BenefitPolicy::findOne($this->policyId)->toArray();

            return $this->_policy;
        }
    }

    public function getProvider(): ?array
    {
        if ($this->_provider === null) {
            if ($this->policyId === null) {
                return null;
            }

            $this->getPolicy();

            if ($this->_policy === null) {
                return null;
            }

            $this->_provider = BenefitProvider::findOne($this->_policy['providerId'])->toArray();

            return $this->_provider;
        }
    }

    public function getEmployees(): ?array
    {
        if ($this->_employees === null) {
            $variantEmployees = BenefitEmployeeVariant::findAll(['variantId' => $this->id]);

            $this->_employees = [];
            foreach($variantEmployees as $employee) {
                $this->_employees[] = Employee::findOne($employee);
            }

            return $this->_employees;
        }
    }

    public function getFields(string $benefitTypeName): ?array
    {
        $variant = match ($benefitTypeName ?? '') {
            'Dental' => VariantDental::getVariant($this->id, $this->request),
        };

        if($variant) {
            return $variant;
        }

        return null;
    }

    /**
     * @param bool $isNew
     */
    public function afterSave(bool $isNew): void
    {
        if (!$this->propagating) {
            $this->_saveRecord($isNew);
        }

        parent::afterSave($isNew); // TODO: Change the autogenerated stub
    }

    private function _saveRecord(bool $isNew): void
    {
        try {
            $policyId = $this->policyId;

            $policy = BenefitPolicy::findOne($policyId);

            if (is_null($policy)) {
                throw new NotFoundHttpException(Craft::t('staff-management', 'Policy does not exist'));
            }

            $benefitType = BenefitType::findOne($policy->benefitTypeId);

            // save benefit
            $variant = match ($benefitType->name ?? '') {
                'Dental' => VariantDental::saveVariant($this->id ?? null, $this->trs->id ?? null, $policy->id, $this->request),
            };

            $successVariant = $variant->save();

            if(!$successVariant) {
                Craft::error(Craft::t('staff-management','The save of the Benefit Variant wasn\'t successfull'));
            }

        } catch (\Exception $e) {
            Craft::error($e->getMessage(), __METHOD__);
        }
    }

}