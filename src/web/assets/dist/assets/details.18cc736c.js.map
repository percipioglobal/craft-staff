{"version":3,"file":"details.18cc736c.js","sources":["../../../../../buildchain/src/vue/organisms/forms/form--import.vue","../../../../../buildchain/src/vue/molecules/listitems/listitem--log.vue","../../../../../buildchain/src/vue/organisms/lists/list--logs.vue","../../../../../buildchain/src/vue/payrun/PayRunDetail.vue","../../../../../buildchain/src/js/payrunDetails.ts"],"sourcesContent":["<script setup lang=\"ts\">\n    const props = defineProps({\n        payrun: Object,\n    })\n\n    const csrf = window.api.csrf\n\n</script>\n\n<template>\n    <form method=\"post\" accept-charset=\"UTF-8\" enctype=\"multipart/form-data\" class=\"inline-flex\">\n        <input type=\"hidden\" name=\"CRAFT_CSRF_TOKEN\" :value=\"csrf\" />\n        <input type=\"hidden\" name=\"action\" value=\"staff-management/pay-run/import\">\n        <input type=\"hidden\" name=\"payRunId\" :value=\"payrun?.id\" />\n        <input type=\"hidden\" name=\"employerId\" :value=\"payrun?.employerId\" />\n        <input type=\"file\" class=\"fixed top-full\" name=\"file\" id=\"attendee-csv-file\" accept=\".csv\" onchange=\"this.form.submit();\" />\n        <label for=\"attendee-csv-file\" class=\"cursor-pointer inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto\">Upload CSV To Staffology</label>\n    </form>\n</template>","<script setup lang=\"ts\">\n    const props = defineProps({\n        log: Object,\n    })\n\n    const user = (log) => {\n\n        if(log?.firstName || log?.lastName){\n            return `${log.firstName} ${log.lastName}`\n        }\n\n        return log.username\n    }\n\n    const style = (log) => {\n\n        const styles = {\n            'Succeeded': 'bg-emerald-400 text-emerald-900',\n            'Failed': 'bg-red-400 text-red-900',\n            'default': 'bg-orange-400 text-orange-900'\n        }\n\n        return styles[log.status] ?? styles['default']\n    }\n    \n</script>\n\n<template>\n    <div \n        class=\"grid grid-cols-7 border-b border-solid border-gray-200\"\n    >\n        <div class=\"col-span-2 whitespace-nowrap px-3 py-4 flex text-sm text-gray-500\">{{ log.filename }}</div>\n        <div class=\"whitespace-nowrap px-3 py-4 flex text-sm text-gray-500\">{{ log.rowCount }}</div>\n        <div class=\"col-span-2 whitespace-nowrap px-3 py-4 flex text-sm text-gray-500\">{{ user(log) }}</div>\n        <div class=\"whitespace-nowrap px-3 py-4 flex text-sm text-gray-500\">{{ log.dateCreated }}</div>\n        <div class=\"items-center px-3 py-2 flex\">\n            <div :class=\"[\n                'whitespace-nowrap rounded-full text-xs inline-block px-3 py-1 mb-0 font-bold',\n                style(log)\n            ]\">{{ log.status ? log.status : 'Unknown' }}</div>\n        </div>\n    </div>\n</template>","<script setup lang=\"ts\">\n    import { getPayRunLogs } from '~/js/composables/useAxiosClient'\n    import { ref, onMounted, onUnmounted, watchEffect } from 'vue'\n    import { usePayRunStore } from '~/stores/payrun'\n\n    import LogListItem from '~/vue/molecules/listitems/listitem--log.vue'\n    import LoadingList from '~/vue/molecules/listitems/listitem--loading.vue'\n\n    const store = usePayRunStore()\n\n    const props = defineProps({\n        payrun: String,\n    })\n\n    watchEffect(() => {\n        if(props.payrun) {\n            getPayRunLogs(props.payrun)\n        }\n    })\n\n</script>\n\n<template>\n    <div class=\"mt-8 flex flex-col w-full\">\n        <div class=\"-my-2 overflow-x-auto w-full\">\n            <div class=\"inline-block min-w-full py-2 align-middle\">\n                <div class=\"overflow-hidden border border-solid border-gray-300 md:rounded-lg\">\n\n                    <!-- HEADINGS -->\n                    <div class=\"grid grid-cols-7 border-b border-solid border-gray-300\">\n                        <div class=\"col-span-2 py-3 px-3 text-left text-sm font-semibold text-gray-900\">Filename</div>\n                        <div class=\"py-3 px-3 text-left text-sm font-semibold text-gray-900\">Row count</div>\n                        <div class=\"col-span-2 px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Uploaded By</div>\n                        <div class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Uploaded</div>\n                        <div class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Status</div>\n                    </div>\n\n                    <!-- CONTENT -->\n                    <LoadingList v-if=\"!payrun\" />\n\n                    <div class=\"grid grid-cols-7 border-b border-solid border-gray-200 py-4 px-3 text-center\" v-if=\"payrun && store.logs.length === 0\">\n                        <div class=\"col-span-7\">There are currently no logs for this pay run</div>\n                    </div>\n\n                    <LogListItem  v-for=\"log in store.logs\" :key=\"log.id\" :log=\"log\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</template>","<script setup lang=\"ts\">\n    import { useQuery } from '@vue/apollo-composable'\n    import { ref } from 'vue'\n    import { storeToRefs } from 'pinia'\n\n    import { fetchPayRun } from '~/js/composables/useAxiosClient'\n    import { usePayRunStore } from '~/stores/payrun'\n    import { PAYRUN } from '~/graphql/payrun.ts'\n\n    import PayRunStats from '~/vue/molecules/stats/stats--payrun.vue'\n    import LoadingStats from '~/vue/molecules/stats/stats--loading.vue'\n    import BannerError from '~/vue/molecules/banners/banner--error.vue'\n    import StatusSynced from '~/vue/molecules/status/status--synced.vue'\n    import FormImport from '~/vue/organisms/forms/form--import.vue'\n    import ListLogs from '~/vue/organisms/lists/list--logs.vue'\n\n    const payRunId = window.location.href.split(\"/\").pop()\n    const { result, loading } = useQuery(\n        PAYRUN, \n        { id: payRunId },\n        { pollInterval: 5000 }\n    )\n    const store = usePayRunStore()\n    const error = ref(window?.validation?.error)\n\n    const downloadTemplate = (id) => {\n        const url = `/admin/staff-management/pay-runs/download-template/${id}`\n        const popout = window.open(url)\n    }\n\n    // const fetchPayRun = () => {}\n\n\n    const handleClose = () => {\n        error.value = ''\n    }  \n\n</script>\n\n<template>\n\n    <div class=\"md:flex items-start\">\n        <div class=\"flex-grow pr-4\" style=\"margin-bottom:0\">\n            <div class=\"flex items-center\">\n                <a :href=\"`/admin/staff-management/pay-runs/${result?.payrun?.employerId}`\" title=\"Go back to overview\" class=\"inline-flex no-underline items-center px-2.5 py-1.5 rounded-full text-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\" style=\"margin-bottom:0\">&larr;</a>\n                <h1 class=\"ml-2 text-xl font-semibold text-gray-900\">{{ result?.payrun?.taxYear }} / {{ result?.payrun?.period }}</h1>\n            </div>\n            <p class=\"mt-2 text-sm text-gray-700\">Download the current pay run CSV using the Download button below. When uploading, ensure table headings and the file format (CSV) remain unchanged.</p>\n        </div>\n        <div class=\"mt-4 md:mt-0 flex\" style=\"margin-bottom:0\">\n            <StatusSynced :date=\"result?.payrun?.dateSynced\" />\n            <button \n                @click=\"fetchPayRun(result?.payrun?.id)\"\n                :disabled=\"store.loadingFetched\" \n                class=\"cursor-pointer inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 disabled:bg-indigo-400 disabled:cursor-not-allowed px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto\" \n                style=\"margin-bottom:0\"\n            >\n                <span>Refresh Pay Run</span>\n                <svg v-if=\"store.loadingFetched\" class=\"animate-spin ml-1 h-3 w-3 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" style=\"margin-bottom:0\">\n                    <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                    <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"mt-8\">\n        <LoadingStats v-if=\"!result?.payrun\"/>\n        <PayRunStats :payrun=\"result?.payrun\" v-if=\"result?.payrun\" />\n    </div>\n\n    <div class=\"mt-8 flex\">\n\n        <BannerError v-if=\"error\" :error=\"error\" @close=\"handleClose\" />\n\n        <div class=\"sm:flex-auto\" style=\"margin-bottom:0\">\n            <h2>Uploaded Pay Run Entries</h2>\n            <span class=\"mt-4 md:mt-0 text-xs inline-flex mr-2 flex-grow\" style=\"margin-bottom:0\">\n                Last Synced: {{ result?.payrun?.dateSynced }}\n            </span>\n        </div>\n        <div class=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none space-x-2\" style=\"margin-bottom:0\" v-if=\"result?.payrun\">\n            <button @click=\"downloadTemplate(result?.payrun?.id)\" class=\"cursor-pointer inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">Download Latest Pay Run Template</button>\n            <FormImport :payrun=\"result?.payrun\" />            \n        </div>\n\n        <ListLogs :payrun=\"result?.payrun?.id\" />\n    </div> \n\n</template>","import Details from '~/vue/payrun/PayRunDetail.vue'\nimport { createApp, h, provide } from 'vue'\nimport { createPinia } from 'pinia'\nimport { DefaultApolloClient } from '@vue/apollo-composable'\nimport { defaultClient } from '~/js/composables/useApolloClient'\n\n\nconst payRunDetails = async () => {\n    const payRunDetails = createApp({\n        setup() {\n            provide(DefaultApolloClient, defaultClient)\n        },\n        render: () => h(Details)\n    })\n    payRunDetails.use(createPinia())\n    const root = payRunDetails.mount('#detail-container')\n\n    return root\n}\n\npayRunDetails().then( () => {\n    console.log()\n})"],"names":["Details"],"mappings":"82PAKU,GAAO,OAAO,IAAI,kwBCAlB,GAAO,AAAC,GAEP,kBAAK,YAAa,kBAAK,UACf,GAAG,EAAI,aAAa,EAAI,WAG5B,EAAI,SAGT,EAAQ,AAAC,GAAQ,YAEb,GAAS,CACX,UAAa,kCACb,OAAU,0BACV,QAAW,uCAGR,KAAO,EAAI,UAAX,OAAsB,EAAO,kyCCdlC,EAAQ,aAMF,IAAM,CACX,EAAM,WACS,EAAM,0hDCAtB,GAAW,OAAO,SAAS,KAAK,MAAM,KAAK,MAC3C,CAAE,SAAQ,WAAY,EACxB,GACA,CAAE,GAAI,GACN,CAAE,aAAc,MAEd,EAAQ,IACR,EAAQ,EAAI,8BAAQ,aAAR,cAAoB,OAEhC,EAAmB,AAAC,GAAO,MACvB,GAAM,sDAAsD,IACnD,OAAO,KAAK,IAMzB,EAAc,IAAM,GAChB,MAAQ,uwEC3BhB,GAAgB,SAAY,MACxB,GAAgB,EAAU,CAC5B,OAAQ,GACI,EAAqB,KAEjC,OAAQ,IAAM,EAAEA,eAEN,IAAI,KACL,EAAc,MAAM,sBAKrC,KAAgB,KAAM,IAAM,SAChB"}