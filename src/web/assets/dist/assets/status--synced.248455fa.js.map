{"version":3,"file":"status--synced.248455fa.js","sources":["../../../../../buildchain/src/graphql/payrun.ts","../../../../../buildchain/src/js/composables/useCurrencyFormat.ts","../../../../../buildchain/src/vue/molecules/status/status--synced.vue"],"sourcesContent":["import { gql } from 'graphql-tag'\n\nexport const PAYRUNS = gql`\n    query Payruns($employerId: [ID]) {\n        payruns(employerId: $employerId) {\n            id,\n            employerId\n            taxYear\n            period\n            employeeCount\n            startDate @formatDateTime(format:\"jS M, Y\")\n            endDate @formatDateTime(format:\"jS M, Y\")\n            paymentDate @formatDateTime(format:\"jS M, Y\")\n            dateUpdated @formatDateTime(format:\"jS M, Y\")\n            dateSynced:dateUpdated @formatDateTime(format:\"Y-m-d H:i\")\n            employer\n            state\n            totals{\n                totalCost\n            }\n        }\n    }\n`\n\nexport const PAYRUN = gql`\n    query Payrun($id: [QueryArgument]) {\n        payrun(id: $id) {\n            id,\n            paymentDate @formatDateTime(format:\"j M, Y\")\n            dateSynced:dateUpdated @formatDateTime(format:\"Y-m-d H:i\")\n            employerId\n            taxYear\n            period\n            totals {\n                totalCost\n                gross\n                tax\n                employerNi\n                employeeNi\n            }\n        }\n    }\n`","export const format = (amount: string) => {\n    if (!amount) {\n        return amount\n    }\n\n    return parseFloat(amount).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n}","<script setup lang=\"ts\">\n    import { getQueue } from '~/js/composables/useAxiosClient'\n    import { ref, onMounted, onUnmounted } from 'vue'\n    import { usePayRunStore } from '~/stores/payrun'\n\n    const props = defineProps({\n        date: String,\n    })\n\n    const store = usePayRunStore()\n    const interval = ref(null)\n\n    onMounted(() => {\n        interval.value = setInterval(() => {\n            getQueue()\n        }, 5000)\n    }) \n\n    onUnmounted(() => {\n        clearInterval(interval.value)\n    })\n</script>\n\n<template>\n    <span class=\"mt-4 md:mt-0 text-xs inline-flex mr-2 flex-grow\" style=\"margin-bottom:0\">\n        Last Synced: \n        <span v-if=\"store.queue != 0\" class=\"flex items-center pl-1\">\n            <span style=\"margin-bottom:0\">Queue is running to sync</span>\n        </span>\n        <span v-else class=\"pl-1\">{{ date }}</span>\n    </span>\n</template>"],"names":[],"mappings":"wKAEa,GAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBV,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECxBT,EAAS,AAAC,GACd,GAIE,WAAW,GAAQ,QAAQ,GAAG,QAAQ,oBAAqB,0SCI5D,GAAQ,IACR,EAAW,EAAI,eAEX,IAAM,GACH,MAAQ,YAAY,IAAM,MAEhC,SAGK,IAAM,eACA,EAAS"}